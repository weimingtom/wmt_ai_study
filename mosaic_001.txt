https://www.sohu.com/a/357953571_505886  


单片机精讲吴鉴鹰.
  
1076
文章
119万
总阅读
查看TA的文章>
评论
0
分享
微信分享
新浪微博
QQ空间
复制链接
人类历史上最重要的36个代码片段（附代码）... 
2019-12-02 22:47


作者：Future Tense，原标题：The Lines of Code That Changed Everything，译者：boxi

早在2009年，Facebook推出了改变世界的代码段——点“赞”按钮。“赞”是几名程序员和设计师的创意，其中包括Leah Pearlman和Justin Rosenstein在内。他们推测，Facebook用户常常因为太忙而没时间到朋友的帖子上发表评论，所以想如果有一个简单的按钮可以按一下的话，也许互动就会爆发：这可以释放出大量令人兴奋的肯定。就像Pearlman 后来所说那样：“朋友们可以通过这种频繁的多、容易得多的互动手段来相互验证。”

这个点子奏效了，也许有点太好了。通过把“赞”做成一个零阻力的手势，到了2012年，大家的点赞次数已经超过1万亿次，并且的确释放出了大量的验证。但是它的副作用也令人不安。我们发布了一张照之后片，就会坐在那里焦急地不断刷新页面，等待点赞数的增加。我们想知道为什么别人拿到的点赞数会比自己的多。于是我们开始给自己日常的在线行为放大功率：想变得更有趣、更刻薄、更迷人、更极端。

代码塑造了我们的生活。就像风投家Marc Andreessen所写那样：“ 软件蚕食整个世界”，尽管此刻说软件正在消化世界可能会更准确些。

从文化角度上来讲，代码是比较下层的存在。我们可以感觉到它对我们日常现实的神秘影响，但是却很少能看到它，而且对于非初学者来说有点高深莫测。（硅谷的人喜欢这样这有助于他们自我神话为巫师。）我们给电影、游戏和电视都立了十大排行榜，让那些塑造了我们灵魂的作品扬名立万。但是，即便代码跟这些类型的作品一样反映了时代思潮，我们却未曾坐下来汇编过世界上最重要的代码清单。

所以Slate杂志决定自己来做这件事。为了弄清楚有哪些让世界为之倾斜的软件，杂志编辑对计算机科学家、软件开发人员、历史学家、政策制定者以及新闻工作者进行了民意调查。这些人需要做出以下选择：哪些代码段影响巨大？哪些代码改变了我们的生活？约有75位受访者提出了各种各样的想法，Slate从中选择了36位。鉴于写成的有影响的代码如汗牛充栋，这里的清单并不完整，也不可能完整。（我很喜欢的一个并没有人选：快速排序算法！或者Ada Lovelace的伯努利算法也许也算一个。）就像所有的榜单一样，它的目的是启发，去帮助我们重新思考代码是如何影响我们的生活，以及程序员所做的决策是如何影响未来的。

里面的有些代码你可能已经听说过，比如HTML什么的。有的代码功能强大（比如用来对概率建模的蒙特卡洛模拟），但一般人完全不知道是什么。有的则包含了致命错误，比方说波音737 Max的缺陷。还有一些令人毛骨悚然，比方说让营销人员知道你是否已打开电子邮件的像素跟踪。

有一个趋势是很明显的：最重要的代码往往会通过消除阻力来塑造新行为。当软件让做某件事情变得更容易时，这种事情我们就会做得更多。1988年编写的代码第一次建立起“Internet Relay Chat（IRC，多人在线交谈系统）”，这使得早期的网民彼此可以实时进行文字聊天。现在，实时文字聊天已经无处不在，从令人应接不暇的Slack职场闲聊吹水，到Twitch直播的钓鱼和反钓鱼之战，不一而足。

某些代码什么时候具备了划时代意义未必总是很清晰。一开始它只是个怪异的尝试，一个实验气球。《Spacewar ！》是第一个获得病毒式流行的视频游戏。可是在1961年的时候，用价值12万美元（相当于2019年的100万美元）的机柜式计算机万游戏被视为一种相当无聊的使用方式。但是它独创了很多帮助计算机进入主流的概念：用图标表示数据，让用户用手持控制器操作这些图标。

代码的影响可能会让所有人感到惊讶，包括写代码的人在内。—Clive Thompson，《程序员: 新部落的形成和世界的重塑（Coders: The Making of a New Tribe and the Remaking of the World）》作者

1、二进制穿孔卡片

年代：1725

第一段代码

二进制编程早在计算机诞生之前就有了。大家认为Basile Bouchon 是第一个给纸片打孔并用来控制机器的人：1725年，他发明了一种织布机，这种机器可以根据送入的穿孔卡片的指令编织图案。打孔的是“1”，没有打孔是“0”。尽管此后东西发生了很大的变化，但代码的基本构建块并没有改变。— Elena Botella，Slate

2、执行的第一段现代代码

年代：1948

既开辟了计算机代码的使用，也引领了塑造冷战军备竞赛的核毁灭计算机模型的使用ENIAC（电子数字积分计算机）是第一台可编程的电子计算机。机器于1945年建成，每解决一个新问题都要靠重新连线许多部件来完成。当一项任务（比如加法）完成时，会用一个脉冲来触发下一项任务。但是几年后，克拉拉· 丹·冯·诺依曼和洛斯阿拉莫斯的科学家Nicholas Metropolis对ENIAC重新进行了接线，让这台机器跑出来有史以来在任何计算机上执行的第一段现代代码：从可寻址只读存储器（ENIAC的函数表开关）执行数百条数字指令。他们模拟了新墨西哥州洛斯阿拉莫斯国家实验室正在评估的几种原子弹设计的爆炸情况，用蒙特卡洛技术来模拟一个复杂系统，几乎是一步步地把可能结果的概率分布呈现出来。冯·诺依曼和Metropolis）向洛斯阿拉莫斯的核科学家发送了20000多张卡片，跟踪弹头引爆后模拟中子的变化情况。知道今天，这段代码的子孙后代还在洛斯阿拉莫斯那里发挥作用。—Thomas Haigh，《ENIAC in Action: Making and Remaking the Modern Computer（ENIAC实战：现代计算机的制造和改造）》合著者

3、Grace Hopper的编译器

年代：1952

令计算机处理文字成为可能

IF END OF DATA GO TO OPERATION 14 .

来自维基百科

当Grace Hopper决定通过以人类语言为基础来简化整个过程时，她正在对一台早期计算机进行编程。二战期间，Hopper加入了美国海军预备队，她知道，像她在部队的上司一样，大家都在努力去理解二进制代码。而如果编程语言是基于英语的话，那么这项工作就不会那么容易出错，并且对于那些没有数学博士学位的人来说也更加平易近人了。

一些人对这种想法嗤之以鼻，但1950年代初时，她设计出了一种编译器，也就是一组可以将更容易理解的代码转化为由机器处理的较低级代码的指令。通过这一工具，她和她的实验室开发出了FLOW-MATIC，这是第一种将英语纳入该过程的编程语言。——Molly Olmstead，Slate

4、星际飞行（Spacewar）！

年代：1961年

发行的第一款视频游戏

/this routine handles a non-colliding ship invisibly /in hyperspace hp1,dap hp2 counti ma1, hp2 lawhp3 / next step daci ml1 law7 daci mb1 random scr9s sir9s xcthr1 addi mx1 daci mx1 swap addi my1 daci my1 random scr9s sir9s xcthr2 daci mdy dioi mdx setup.hpt,3 lacran daci mth hp4,lac i mth sma sub(311040 spa add(311040 daci mth count.hpt,hp4 xcthd2 daci ma1 hp2,jmp . //SteveRussell，收集自Bitsavers.org
1961年末，一群年轻的MIT雇员、学生和同事（其中很多是Tech Model Railroad俱乐部的成员）拿到了最近别人捐赠的DEC PDP-1计算机的深夜使用权。属于非军事计算前沿技术的PDP-1售价为12万美元（按今天计算将超过100万美元），字长达18位，程序存储用的是纸带。这帮程序员用五个月的时间开发了一个游戏，里面是两名玩家控制着飞船（针和楔形物）进行一对一的太空战，同时还要避开位于屏幕中心的恒星的引力。

很快，星际飞行！就在早期的“黑客”社区中传播开来。后来DEC把它预装进了每一台PDP-1里面，并预装到核心内存里面，准备在安装时进行演示。这个程序对1960年代规模还很小的编码社区产生了重大影响，并启发了后面数代的视频游戏创作者。现在它还从模拟者那里找到自己的存在，并且在计算机历史博物馆的最后一台可操作PDP-1上还在定期演示。2018年，游戏的首席开发者Steve Russell在史密森尼学会上说：“它已有50多年的历史。没有未解决的用户投诉。没有崩溃报告。而且支持依旧提供。”——Arthur Daemmrich，导演，勒梅森发明与创新研究中心

5、电子邮件的起源

年代：1965

拜托，这是电子邮件。

WHENEVER A(1).E.FENCE.OR.A(2).E.FENCE.OR.A(3).E.FENCE PRFULL.($'R'1INSTRUCTIONS:$) PRFULL.($ '4MAIL NAME1 NAME2 PROB1 PROG1 PROB2 PROG2 ...$) PRFULL.($ WHERE '=NAME1 NAME2'= IS THE FILE TO BE MAILED,$) PRFULL.($ AND '=PROBN PROGN'= ARE DIRECTORIES TO WHICH '8$, 1 $IT IS TO BE SENT.'B$) CHNCOM.(0) ENDOF CONDITIONAL CTSS 程序员MAIL手册页
1961年，麻省理工学院的黑客开发了一个系统，这个可以让多个用户登录到同一台计算机上，然后他们开始互相给对方简短留言。1965年，一群编码人员决定开发一个正式的命令系统来发送、接收和显示这些数字化的信函。对于“MAIL”这个命令一开始上级是拒绝的，觉得有点轻率，但它的使用却大行其道，以至于到1971年，麻省理工学院甚至出现了第一条垃圾邮件：一条反越战的信息。——Clive Thompson

6、警察巡逻算法

年代：1968

现代预测警务和种族定性计算机化的开始

1965年，当林登·约翰逊总统组建总统执法与司法委员会时，他下令该委员会研究如何利用计算机来帮助解决美国的的“犯罪问题”，他和该委员会对这个问题的定性是“城市问题”和“黑人问题”。这个问题的答案是“警察巡逻算法（Police Beat Algorithm，PBA）”，该算法旨在解决规划问题，比方说在城市的特定区域需要安排多少名警察巡逻之类的问题。通过将PBA与犯罪数据库相结合，警方可以在犯罪实施之前根据种族人口统计数据自动生成嫌犯档案，并相应部署资源（警察，武器和其他装备）。今天的预测警务对黑人和棕色人种监视并定罪的情况相对不成比例。就像PBA的故事提醒我们那样，这种情况并不是不可预见的技术故障的结果：相反，这是这项技术50年设计的完美体现。——Charlton McIlwain，《黑人软件（Black Software: The Internet & Racial Justice, From the Afronet to Black Lives Matter）》作者

7、阿波罗11号登月舱的紧急救助代码

年代：1969

防止登月舱的计算机在太空中耗尽空间的代码

POODOOINHINT CAQ TSALMCADR TCBANKCALL CADRVAC5STOR # STORE ERASABLES FOR DEBUGGING PURPOSES. INDEXALMCADR CAF0 ABORT2TC BORTENT OCT77770OCT 77770 # DONT MOVE CAV37FLBIT # IS AVERAGE G ON MASKFLAGWRD7 CCSA TCWHIMPER -1 # YES. DONT DO POODOO. DO BAILOUT. TCDOWNFLAG ADRESSTATEFLG TCDOWNFLAG ADRESREINTFLG TCDOWNFLAG ADRESNODOFLAG TCBANKCALL CADRMR.KLEAN TCWHIMPER
数字化：Virtual AGC与MIT Museum

阿波罗制导系统计算机（AGC）是一个奇迹：就像计算阿波罗重返地球轨迹的Poppy Northcutt告诉我那样，AGC的计算能力还比不上今天记录个人信息的贺卡。但是，它却做到了该做的。

有限的计算能力和存储空间意味着必须细致地管理好任务，因此AGC始终聚焦在最重要的工作上。如果它没有足够的空间来执行任务，那就不可能完成任务。AGC软件团队知道，总有些事情是自己计划不到的。因此，他们开发了BAILOUT。当计算机有空间用完（或“溢出”）的风险时，AGC会触发BAILOUT把不太重要的数据和操作调走，从而让重要的数据和操作保持正常运行。

当Eagle着陆器准备降落到月球表面时，大概在30000英尺高空处，AGC 发出了“1202”的警报，尼尔·阿姆斯特朗和休斯敦的飞控都没有马上意识到这一点。但是在不到30秒的时间内，指挥中心的计算机专家表示，AGC软件正在按预期的方式运行：放弃了低优先级的工作并重新开始重要的工作（这个过程很快，以至于大家都无法察觉）。阿姆斯特朗和Buzz Aldrin可以继续从AGC那里得到他们绝对需要的东西，好继续安全着陆。

在阿姆斯特朗说出“鹰已降落”之前，溢出警报还会再响三声，但永远是因为事情按预期进行才会响。“救助”一词通常表示任务以失败结束，但在这里却让人类的最高成就成为现实。— 史密森尼国家航空航天博物馆主任Ellen Stofan

8、Hello, World!程序

日期：1972年或更早

把世代引入代码的一句话

main{ printf（“ hello，world n”）; }
当你坐下来学习一门新的编程语言时，教程要你做的第一件事就是让计算机显示出 “Hello，world！”这句话。也许早期最著名的例子来自贝尔实验室备忘录，《C语言编程教程》。这本书写于1974年，尽管有人发现在1972年的B语言手册里面也发现了它，而且可能时间比这还要早。

Hello, World!是一个很美丽的教材。这是一项很小的、可完成的任务，可以让人早早获得成就感。这已成为了标准，有助于说明不同编程语言之间的差异。对于高级程序员来说，这也是一个快速简便的方法，可确保在安装新环境后一切正常。（有时候程序员会用“实现'hello world'的时间'作为比较语言和环境的速度测试。）也许最重要的是，“Hello，world！”天真、友善，而且有助于说明新程序员的代码可产生的影响范围。那就是全世界。——IBM AI设计主管Chris Noessel。

9、空终止串——Null

年代：1972

计算史上最灾难性的设计错误

charyellow[26] = {'y', 'e', 'l', 'l', 'o', 'w', '0'};
GNU C参考手册

1972年，丹尼斯·里奇（Dennis Ritchie）做出了一个重大决定：自己的新语言要用一种所谓的“空终止串”来表示文本。这个概念其实早就出现了，但是他在自己的新语言，C语言里面把它奉若神明，而这一决定的遗产从此就一直缠住了我们。

编程语言表示一段文本的主要有两种方式：它可以是内在的固定长度的——“我就包含10个字符，就这么多。”也可以用过空值（null）结尾——这里有一堆的字符，你尽管看下下去，直到最后到达零字节为止，祝你好运！”

C代码中一个极其常见的错误是把一个长字符串复制到一个较短的字符串，造成结尾处溢出，这意味着你破坏了刚好在附近的其他数据。就像在白板边上写东西一样。

除了只是导致程序发生故障外，此类错误还可以用来说服程序用经过精心设计的特定数据去覆盖某些内容，从而改变程序的行为。这就是缓冲区溢出攻击。但凡你听说过的安全漏洞几乎都是从这里开始的，其始作俑者就是1988年的莫里斯蠕虫病毒（Morris Worm）。

仔细写代码可以避免在C语言中出现此类错误，但是这种语言的特点导致此类错误产生容易检测难。几乎所有的现代语言都避开了以null终止的字符串，但是从路由器到“智能”灯泡，C和C ++仍然在世界的基础处运行着。因此，在将近50年后，我们仍跟这类bug在玩打地鼠的游戏。——Jamie Zawinski，Netscape开发者，Mozilla.org创始人，DNA Lounge老板

10、Telenet远程网

年代：1975

第一个基于数据包交换的公共数据网络，是当今互联网的骨干

互联网的前身是ARPANET，这是一个供高级研究计划局（现为DARPA）研究人员机器之间交换数据的计算机网络。随着ARPANET在政府内部的扩张，网络搭建者意识到这项技术可能对普通大众也很有价值，以及参与到其中可以催生多少的商机。1975年8月，ARPANET的商业版本Telenet 在七个城市上线，该网络可让最早期的客户（主要是计算机或数据库公司）用电话拨号方式上传下载（如电子邮件原型消息）或远程访问存储在中央计算机上的代码。虽然ARPANET通常被认为是现代Internet的鼻祖，但实际上为公众消费而设计的Telenet才是Web的前身。实际上，1980年代Telenet的最大客户之一就是Quantum Link，后者后来成为AOL。——Jane C. Hu，Future Tense contributor

11、温哥华证券交易所的舍入误差

年代：1982

一个小小的小数点之别付出的巨大代价

- return floor(value)

+ return round(value)

温哥华证券交易所使用的代码大概是这样的。

1982年初，温哥华证券交易所推出了一种一开始锚定基点为1000点的电子股票指数。但是推出后在两年的时间之内，它就跌到了原始价值的一半，这种走势在牛气冲天的1980年代初期是一个令人困惑的反例。一项调查显示，对指数的计算在一个地方出了问题，那就是用floor而不是round。用floor意味着指数被舍入而不是取整到小数点后三位。（数字计算机必须要有有限的精度，因此需要四舍五入或截断。）因此，如果指数计算值为532.7528的话，计算机保存下来的值是532.752，而不是四舍五入为532.753。这一点点的差异本来关系不大，但由于每天都要对指数进行数千次计算，这种看似很小的差异（基本上每次都进行不进位舍入）导致指数值出现急剧下降。这个编程错误最后在1983年11月被修正，当时的某个周五收盘时指数已经降到500左右了。到了下周一指数以超过1000点开盘，损失掉的价值被恢复回来了。——伊利诺伊大学香槟分校助理教授Lav Varshney

12、Therac-25代码

年代：1985–1987年

事实证明，过分自信会杀死人

当真相显现时，头条新闻就现代化发出了警告。《洛杉矶时报》宣称：“复杂时代的软件故障会死人。” 一种本来用于治疗癌症的机器由于在几家医疗机构对六名患者进行了过大剂量的放射，造成了至少三人死亡。

研究人员经过调查发现，Therac-25的程序允许致命错误的出现。本来这台机器提供的是低功率和高功率两种类型的治疗，而后者需要金属设备来过滤光束。但是由于软件存在的错误，操作员可以在没有合适的金属设备就绪的情况下意外触发高功率模式。

在设计上，Therac-25是Therac-20的“改进”版，而且这种软件被认为已经万无一失，因此不需要外部的安全检查。结果：重大死亡的责任要归咎于过度自信的工程师，因为他们没有对错误发生的可能性做出解释。——Molly Olmstead

13、多人在线交谈系统（IRC）

年代：1988

在网上闲逛的起源

/join#cats
Internet Relay Chat（一般简称IRC）的历史很早，甚至在大部分人不能告诉你互联网是什么的时候就有了。这是第一种流行的在群组频道内跟他人实时聊天的手段。早期用户会登录上去分享消息，比方说1991年苏联发生一起政变期间曾进行了媒体管制。聊天本身也需要输入一些代码：比方说，要加入频道，你得输入“/ join ＃[ 频道名称]。”（对于今天玩Slack上瘾的人来说会很熟悉。）如果你想表达一些关于自己的信息，可以输入“/ me太累了”，它就会显示你的名字加上星号加上“太累了。”功能很基础，但是对于很多人来说，这是他们用计算机命令画出的第一笔，并且是加入谈话的门票。——April Glaser，Slate

14、莫里斯蠕虫

年代：1988

让人意识到互联网已经变得有多庞大的一盆冷水

checkother /* 0x57d0 */ { ints, l8, l12, l16, optval; structsockaddr_insin;/* 16 bytes */
optval = 1;if((random % 7) == 3)return; /* 612 */

s = socket(AF_INET, SOCK_STREAM, 0);if(s < 0)return;

这是莫里斯蠕虫代码关键功能的摘录。Robert Morris，计算机历史博物馆和

Arialdo Martini提供

当时23岁的康奈尔大学研究生莫里斯Morris释放莫里斯蠕虫（Morris Worm），发动了所谓的“互联网的首次重大攻击”时，罗伯特·莫里斯和互联网本身都还很年轻。当时接入互联网的6万台机器里面，大概有10％遭到了破坏，造成数百万美元的损失，并导致《纽约时报》首次刊出“互联网”这一词。即使是精通技术的人，对于这个蠕虫的影响范围如此之广也感到瞠目结舌。莫里斯说，他本意并不想造成如此大的伤害，他也因此成为根据《计算机欺诈和滥用法》被起诉的第一人。在被判处三年缓刑之后，他成为了著名的创业孵化器Y Combinator 的共同创始人以及麻省理工学院的计算机科学助理教授。——Elena Botella

15、只有一行代码的病毒

年代：大约1990年代

一行代码的威力，以及计算机总让人惊讶的脆弱性

：{：| ：＆}; ：
不要在家里跑这行代码。提供者：Chris Noessel

你在上面看到的是一种称为“叉路炸弹（fork bomb）”的病毒——只有一行代码。当然它的发作需要满足一些特定的条件（包括Unix 操作系统版本要旧一点，易感染的那种）。在条件满足的情况下，如果你在Bash里面输入这条命令，它就会一遍又一遍地复制自身，直到把计算机中的所有可用内存耗尽，导致计算机崩溃。

这段代码的美丽之处不在于代码之小与危害之大的对比，而在于它用冒号作为函数名。大多数函数（可重复使用的代码行）的命名都是描述性的，比方说“Print”或“isThisEmailValid”，但是这并不是严格要求的规矩。大多数计算语言都不能用冒号作为函数名称，但是Bash就可以。

我最早见到这行代码要追溯到2002年，当时德国法兰克福的一家艺术博物馆Angewandte Kunst 博物馆正在展览。博物馆展览代码可是很罕见的的——Chris Noessel

16、HTML超链接

年代：1990

让我们把所有东西连接上任何东西（甚至是难以想象的东西）的工具

<ahref= "https://www.slate.com">Slate
蒂姆·伯纳斯·李（Tim Berners-Lee）引入超链接，世界从此改变了。超链接是一段让人人皆可遨游WWW的代码。将信息链接起来的概念并不算特别新颖，但超链接的新鲜之处在于，它把各种计算机系统约定的标点符号拼凑到了一起，统一成URL冒号双斜杠的格式，从而对任何现有的条目进行命名。尽管伯纳斯·李担心向后兼容性的问题，但超链接任何东西的概念令该想法永不过时。伯纳斯·李的超链接可以随意变成“马上购买”按钮，点赞拇指、转发推特等等。这些令人意想不到的用例应该能够提醒我们，当我们站在技术革命的风口浪尖时，最难预料到的就是接下来会发生的事情。——R Street技术和创新总监Charles Duan

17、JPEG的引入

年代：1992

永远改变了我们与摄影的关系

double*NaiveDct_transform(doublevector[], size_tlen){if(SIZE_MAX / sizeof(double) < len)returnNULL;double*result = malloc(len * sizeof(double));if(result == NULL)returnNULL;
doublefactor = M_PI / len;for(size_ti = 0; i < len; i++) {doublesum = 0;for(size_tj = 0; j < len; j++)sum += vector[j] * cos((j + 0.5) * i * factor);result[i] = sum;}returnresult;}

上述代码片段是离散余弦变换算法，JPEG背后的基石。

Nayuki项目

我们现在已经把相机装满照片视为理所当然。但是过去表示图像需要大量的数据。1992年，联合图像专家组（Joint Photographic Experts Group）发布了JPEG的标准规范，从而让图像文件变得更小。尽管当时也可以用其他的压缩格式，但JPEG之所以能成为世界标准，部分原因是它不用交版税。JPEG采用了有损压缩，在压缩过程当中可以消除图像里面人眼无法检测到的部分，比方说颜色的细微变化。有损压缩对于1992年引入的另一项发明MP3也至关重要.类似地，这种音频文件格式通过丢弃人耳无法检测到的数据而变得紧凑。——Aaron Mak，Slate

18、Mosaic浏览器

年代：1993

现代web的诞生

MakeImage(dsp, data, width, height, depth, img_info, clip)Display *dsp;unsignedchar*data;intwidth, height;intdepth;ImageInfo *img_info;intclip;{intlinepad, shiftnum;intshiftstart, shiftstop, shiftinc;intbytesperline,bpp;inttemp;intw, h;XImage *newimage;unsignedchar*bit_data, *bitp, *datap;Visual *theVisual;intbmap_order;unsignedlongc;intrshift, gshift, bshift;#ifdefNEWswitch(bpp=bits_per_pixel(dsp,depth))#elseswitch(depth)
以上是2.7版代码的一部分。

美国国家超级计算机应用中心软件开发小组，用于X Windows系统的NCSA Mosaic

以前的浏览器渲染处理得很笨拙，虽然文本呈现的效果很好，但是浏览图像却一定要单独打开窗口。Marc Andreessen领导的Mosaic黑客希望做出一个能让文字和图像一起呈现的浏览器。是他们让web变得我们熟悉的样子，就好像在看一本很酷的数字杂志或报纸一样。随着世界各地的网站管理员开始要求更多的标签来让网站看起来更酷，这也促使HTML标准的发展走上了快车道。（那时候框架似乎是个超酷的主意。）——Clive Thompson

19、会跟踪的像素

年代：1993

Facebook的PageView 跟踪像素。

<img height="1"width="1"style="display:none"src="网页链接Facebook's PageView Tracking Pixel.Facebook
这些小小的HTML片段看起来并没有多少，但它们却是数字广告的基石，让它们成为了许多当代问题（监视，媒体整合甚至虚假信息）的核心。

早在1990年代的时候，web设计师就开始用透明的单像素图像来调整页面布局。但是，计算机必须下载网页上的每一张图像，甚至大家察觉不到的像素也得下载。1993年，公司开始利用这一个漏洞：通过跟踪像素下载，他们就可以了解了你是谁在哪里，还触发一个cookie下载到你的浏览器。这个cookie使得Cookie使广告主可以跨多个网站跟踪你。

像素跟踪的成功直接导致了Facebook的“赞”按钮的诞生，这个按钮可在嵌入它的每个网站上跟踪你。这种大规模的数据收集实现了超级的定向，让Facebook广告变得无比成功，其结果是媒体公司数十亿美元的收入被转移到Facebook。随着新闻业的沉沦，定向性的虚假信息大行其道，而基于监视的商业模式开始激增。——Sara Wachter -Boettcher，《技术错误：性别歧视app，带偏见的算法以及其他的有毒技术》作者

20、Robots.txt代码

年代：1994

一个对搜索等应用具有重大影响的微型工具

User-agent: Mediapartners-GoogleDisallow:User-agent: TruliaBotDisallow: /User-agent: *Disallow: /search.htmlUser-agent: *Disallow: /comments/*User-agent: Mediapartners-Google*Disallow:Slate自己的robot.txt
如果你执行过Google搜索的话，你可能会遇到过这样的结果：“由于该网站的robots.txt，该搜索结果的描述不可用。”并不是每个人都希望自己的网站被搜索引擎索引到，这就是robots.txt文件添加到网站的原因之一，让给网站建档的bot（有时也叫做蜘蛛或爬虫）走开而不是访问该站点。robots.txt在访问网站内容方面起到的非比寻常的调停作用使得robots.txt成为了法庭上控辩双方斗争得最激烈的代码段之一，其中涉及到了十几个涉及版权、黑客、入侵，侵权行为的案件，甚至2009年的一桩司法不端行为调查还牵涉到了前第九巡回法院首席法官Alex Kozinski。——乔治敦大学法学院知识产权与信息政策研究室主任Amanda Levendowski

21、维基（Wiki）

年代：1994

为维基百科铺平了道路

subAsLink{local($num) = (@_);local($ref) = $old{"r$num"};defined$ref? ($ref =~ /.(?:gif|jpg|jpeg|png)$/i? "<img src="$ref">": "<a href="$ref">[$num]</a>"): "[$num]";}WikiWikiWeb的WikiBase，最后编辑于2000年6月13日
Ward Cunningham通过自己的网站WikiWikiWeb率先发明了Wiki，他认为这是分享信息最简单的方法。他用了一种基本的标记语言，里面使用方括号将单词不留空格串在一起，并在文本周围用省略号标记，让编辑者更新和组织跨页面链接的信息，这套系统至今在各类Wiki网站上仍被广泛使用，其中就包括2001年推出的Wikipedia（维基百科）。便利的格式使得Wiki成为了某些最重要的活跃在线协作形式（安全漏洞跟踪、记笔记等）的工具。但是，跟任何可以在网上进行编辑的内容一样，Wiki也很容易受到故意破坏，以及围绕着应该发布什么不应该发布什么展开的激烈争吵，所以Wikipedia才会引入讨论页面和规则来管控编辑添加新信息的方式。——April Glaser

22、第一个弹出广告

年代：90年代中期

互联网的灾祸

window.open （'网页链接）
在新窗口打开特定URL的基本代码。

20多年前，我写过一小段Java代码，它会在打开你请求的页面的同时打开另一个小的Web浏览器窗口。这个新窗口里面有一个广告——可怕的弹出式广告。在接下来的几年中，我震惊地看着弹出广告在网络上泛滥，被web上最糟糕、最具侵扰性的广告主滥用。

我当时做弹出广告的目的是这个：我的公司Tripod提供免费主页，让大家把自己想放的任何内容放到上面。为了给这项服务提供补贴，我们得卖广告。但是广告主并不总是喜欢他们刊登广告的页面的内容，因此我们决定将广告与用户的内容分开。所以就有了弹出广告。

我实现弹出式广告的时候就知道这并不是个很好的解决方案。看着它在web上传播就像用胶带来固定你的汽车，然后看着路上的其他人扯掉几条银色的袋子一起凑热闹一样。

自从我向全世界释放了这头邪恶的野兽之后，我出过书，创办过公司，在大学教过人，但别人总会把我跟弹出窗口联系到一起。当本文发表时，我预计仍会收到仇恨的邮件——麻省理工学院公民媒体中心主任Ethan Zuckerman

23、导致一件T恤不合法的代码

年代：大约1995年

语言：Perl

以代码表现激进主义的最早例子之一

#!/bin/perl -s-- -export-a-crypto-system-sig -RSA-3-lines-PERL$m=unpack(H.$w,$m."0"x$w),$_=`echo "16do$w 2+4Oi0$d*-^1[d2%Sa 2/d0<X+d*La1=zU$n%0]SX$k"[$m*]EszlXx++p|dc`,s/^.|W//g,printpack('H*',$_)whileread(STDIN,$m,($w=2*$d-1+length($n)&~1)/2)Munitions T-Shirt主页
那件T恤上的文字是这样写的：“警告：这件T恤被归类为军需品，不得从美国出口或展示给外国人。”曾经有一段时间美国政府把强加密看作是地对空导弹：一旦落入美国敌人手中就会变得无比危险。当加密是在笨重、昂贵的设备内进行时，这种想法还说得过去，但是1990年代，当美国国务院想要阻止密码学研究人员把代码发布到互联网上时，这种想法就不大说得过去了。可是他们没想到RSA加密算法（现代加密技术的基本建构块之一）实在是太优雅了，以至于仅用四行写得密密麻麻的Perl代码就能表示出来……紧凑到可以印到T恤上面。原先的那件T恤现在已成收藏家的藏品。出口管制虽然还没有完全取消，但已大大减少。——康奈尔理工学院、康奈尔法学院法学教授James Grimmelmann

24、Google的PageRank算法

年代：1996

革新了我们知识的组织方式

import numpy as npdef pagerank(M, num_iterations=100, d=0.85):N = M.shape[1]v = np.random.rand(N, 1)v = v / np.linalg.norm(v, 1)iteration = 0while iteration < num_iterations:iteration += 1v = d * np.matmul(M, v) + (1 - d) / Nreturn v
Google创建的算法，上述实现由Wikipedia提供

在PageRank之前，搜索引擎是通过寻找我们的查询关键字是否跟文档里面的单词匹配来查找信息的。但Larry PageSergey Brin提出了一个绝妙的主意：知识是社会化的，搜索也应如此。为此，他们创建了一种算法，PageRank，这个算法会根据网上有多少其他页面链接到某个网页来对该网页的突出程度进行排名。Google今天之所以如此强大，就因为这一个洞察。——Clive Thompson

25、GeoCities鼠标轨迹

年代：1990年代中期

它让网站最平凡的元素也能酷炫起来。

JSFX.FireSpark.prototype.changeColour = function{var colour="";r2= Math.random*255;g2= r2;b2= 0;if(!(r2 | g2 | b2)){r2=255;g2=255;b2=0;}colour = "#"+ dec2hex(r2) + dec2hex(g2) + dec2hex(b2);this.setBgColor(colour);}Roy Whittle
Douglas Englebart和Bill English在1960年代后期发明的鼠标改变了我们与计算机沟通的方式。尽管使用鼠标很直观，但当时的显示技术通常无法跟上鼠标的快速移动。操作系统开发人员于是添加了鼠标轨迹，也就是瞬时的阴影图像，显示出光标在之前的位置，从而更易于跟踪和查找。

在1990年代中期，GeoCities 是第一个提供免费服务，让用户可以轻松创建自己的Web内容的公司。GeoCities 所见即所得（WYSIWYG）的编辑器使得创建者可以轻松地拖拽内容，添加自定义的代码段，包括用于定制访问者看到的鼠标轨迹的代码。在GeoCities的网页上，你的光标可以留下童话般的灰尘、气泡或小小的万圣节蝙蝠的痕迹。这些绚丽的像素是一个时代的缩影，说明我们已经能够自己建立自己的“网络空间”——Nikki Stevens，亚利桑那州立大学博士研究生

26、RSS（简单信息聚合）

年代：1999

让大家在一个地方就能阅读《纽约时报》、Gizmodo 以及Garfield Minus Garfield。

<?xml version="1.0" encoding="UTF-8" ?><rssversion="2.0"><channel><title>RSS Title</title><deion>This is an example of an RSS feed</deion><link>网页链接<lastBuildDate>Mon, 06 Sep 2010 00:01:00 +0000 </lastBuildDate><pubDate>Sun, 06 Sep 2009 16:20:00 +0000</pubDate><ttl>1800</ttl><item><title>Example entry</title><deion>Here is some text containing an interesting deion.</deion><link>网页链接<guidisPermaLink="false">7bd204c6-1655-4c27-aeee-53f933c5395f</guid><pubDate>Sun, 06 Sep 2009 16:20:00 +0000</pubDate></item></channel></rss>
维基百科

通过将新闻报道、博客、blawgs（法律博客）、播客以及其它web内容形式发布成标准格式，RSS代码让你可以用一种简单、有效以及高效的方式去消费各种信息来源。在巅峰时期，大概是从2005年Google Reader推出到2013年Aaron Swartz（致力于RSS 1.0开发的互联网自由主义者）不幸去世的这段时间内，RSS几乎就相当于在去中心化的互联网上发布的代名词。尽管Google Reader已经不复存在，但从新闻聚合器到播客应用，RSS依旧站在可用互联网的最前沿。——David S. Levine，埃隆大学法学院副教授

27、消失的火星气候轨道器

年代：1999

一个数学错误导致一项任务失败

1999年9月23日，NASA的科学家与价值1.25亿美元的火星气候轨道器失去了联系。经过调查，确定了失联的原因：一家承包商用英制单位给轨道器写了程序，但是NASA的软件用的却是公制。就因为两段代码之间简单的沟通错误，导致轨道器飞到了未知的地方。

很容易会把这种公制——英制的错误当作意外错误而一笔勾销，但这说明了当今软件互联的世界是多么的脆弱。所有的连接技术（电话、宇宙飞船、机器人榨汁机等等）都要靠接口来定义与它者的通信方式。哪怕是最小的差错也会导致混乱。——Charles Duan

28、将地狱火导弹挂接无人机的代码

年代：大约2000–2001年

开辟了无人机战争的先河。

“捕食者”无人机早期版本的武器化是个标志性的时刻，不仅在技术史上如此，在军事和政治史上亦然。现在，无人系统已经遍布整个战场，重塑了士兵的作战方式，甚至改变士兵的来源。捕食者的武器化也使得美国进入了“无人机战争”的时代。而且，随着鉴于机器人日益自动化、武器化引起的问题，我们现在才刚刚开始。一个简单的程序可能就会带来法律上、道德上甚至是生存性的问题。——PW Singer，《连线战争：21世纪的机器人革命与冲突》作者

29、Roomba的导向系统

年代：2002

为技术（和猫）在现实世界的移动建立了新途径

(define-behavior (bounce:start-when(or(bump?)bounce-trigger? ):abort-when(bump-edge?):onetime?t))iRobot
你永远也不会忘记自己的第一台Roomba：我的大概是在17年前在一个朋友家。当它在房子里面嗡嗡地由着自己的性子转来转去时，我正坐在沙发上哈哈大笑。这是机器人革命的曙光，一场看起来很蠢但是又很认真的革命。（跟炸弹清理机器有着一样DNA的机器人正在数百万个家庭里面吸尘，这一点着实让人吃惊。）从那以后，别人再也难以复制它的成功。Roomba证明，尽管我们的注意力重心已经开始向硬件倾斜（比如波士顿动力怪异的膝盖向后弯、会开门的机器狗）上，但软件对于一件产品的广泛采用可能更为重要。阿西莫夫化的iRobot并没有创造出第一个真空吸尘机器人，但是Roomba成为一个必备的利基产品不是因为它吸尘效果好，而是因为它在房间里面的导航效果不错。就像成千上万的小猫视频可以证明那样，在现代计算时代，几乎没有什么东西能比看着Roomba撞到桌腿、转圈一周然后前进更令人满足的了。——Lowen Liu，Slate

30、无线网络的比例公平调度

年代：约2003年

令手机网络成为可能的解决方案

[~, b_user] = max(drc(i, :)/_avg_thruput(i, :));avg_thruput(i+1, :) = (i/(i+1))*avg_thruput(i, :);avg_thruput(i+1, b_user) = (i/(i+1))*avg_thruput(i, b_user)+drc(i, b_user)/(i+1);
“使用路径分集公平地最大化吞吐量的定向发射机多接收机系统”，美国专利第6444990号，2002年9月10日任何时候在任何一个地方，手机的数量通常都要比基站数量多。如果不进行调解的话，所有的传输都会相互干扰并阻碍信息的可靠接收。因此，基站需要解决优先级问题：确保所有用户都能完成通话，同时还要考虑到在嘈杂环境的用户需要赋予更多资源才能得到同样服务质量这一点。解决方案？要在个体用户需求与网络整体性能之间进行折衷。比例公平调度可确保所有用户至少享有最低级别的服务，同时最大程度地提高总的网络吞吐量。这是通过将较低的优先级赋予预期需要更多资源的用户来实现的。仅三行代码就让全球所有的3G和4G无线网络正常工作。——Lav Varshney

31、比特币

年代：2008年

激发大家对一种货币的信心的代码，没有它就没有这种货币

doubleAttackerSuccessProbability(doubleq, intz){doublep = 1.0- q;doublelambda = z * (q / p);doublesum = 1.0;inti, k;for(k = 0; k <= z; k++){doublepoisson = exp(-lambda);for(i = 1; i <= k; i++)poisson *= lambda / i;sum -= poisson * (1- pow(q / p, z - k));}returnsum;}
中本聪

不管你是比特币的布道者还是怀疑者，或者不大确定它是什么，你大概都知道这可是个大事物。比特币本身已经获得了数千亿美元的直接投资，但是也许更重要的是，其基础的技术原理，也就是区块链，似乎有着无穷无尽的应用，从确保民主选举到结束非自愿的性接触等等都在它的应用范围。

这一切始于2008年，当匿名的中本聪发表了一份白皮书，宣布要推出比特币。上述代码就是实现的一部分，这些代码的作用是计算出攻击者接管比特币区块链的可能性极小。这里的数学让世界相信，由不可靠的人组成的系统仍然可以信任，这为至少2777种其他加密货币的创建铺平了道路。——Elena Botella

32、Conficker 蠕虫

年代：2008年10月至2009年

把受感染的计算机变成恶意的机器人大军，同时又保护其他的一些计算机

BOOL__cdecl HasUkrainianLocalepushebxmovebx, ds:GetKeyboardLayoutListpushebppushesixorebp, ebppushebppushebpcallebxmovesi, eaxcmpesi, ebpjzshort loc_37680A
这段代码是安全研究人员Tillmann Werner和Felix Leder 编写的，后来还进行了功能等效性测试，为的是理解和对抗Conficker 蠕虫。

Tillmann Werner和Felix Leder

十年前，感染Conficker的计算机数量多达1500万台。这是一种利用Windows操作系统的漏洞的病毒。这种病毒虽然令人恐惧，但也因为它的老辣而备受推崇：它会邀请每一台计算机加入到庞大的僵尸大军，等候命令下达，还会阻止受感染的计算机打开安全程序或下载可以清除病毒的补丁程序。其最早版本还有一个非常有趣且很能说明问题的怪癖：如果驻留在任何使用乌克兰键盘或乌克兰IP地址的系统就会自毁。多年后，对该病毒进行逆向工程的主管部门和研究人员得出结论，Conficker的开发者确实是乌克兰人，他们这样设计病毒是为了避免违反自己国家的法律。幸运的是，这些黑客一直都没有动用过那支僵尸大军来作恶，截至到2018年，估计仍有35万台计算机感染这种病毒，这提醒我们娴熟的程序员要想发动国际攻击，有选择地对用户造成破坏可以是多么的容易。——Jane C. Hu

33、点赞按钮

年代：2009

它催生了监视经济。

{"__typename":"PageLikeAction","action_type":"LIKE","label":{"text":"Like"}
2019年9月的Facebook.com 网站

Facebook把点“赞”按钮当作向世界展示我们喜欢辛普森一家或炸薯条的一种手段来兜售。。但实际上，它利用了我们的认知偏见，以及设计的力量，去诱使我们分享更多的信息。由于有了前面Sara Wachter-Boettcher介绍过的像素跟踪，它跟踪我们在互联网的行踪，收集有关我们浏览习惯的数据。Facebook拿走这些信息，再把自己的行为定向广告算法卖给广告主。如果一家户外用品公司想要做广告，Facebook可以锁定那些以前“赞”过远足的文章，访问过露营网站以及有户外朋友的人。当这些用户“赞”了相关公司的广告时，这些信息就会反馈会定向广告算法里面。这样一来，监视和商业操纵就形成了周而复始的循环。这一切都是因为一个小小的蓝色大拇指。——Ari Ezra Waldman，纽约法学院教授

34、HTTP严格传输安全（HTTP Strict Transport Security,HSTS）

年代：2009年左右

默认开启安全通道来保护网站安全

Strict-Transport-Security: max-age=31536000; includeSubDomains
Mozilla开发人员指南

当你通过普通HTTP协议将信息发送到网站时，这是会泄漏的——别人可能会拦截这段信息并窃听你的信用卡、健康信息以及伴侣的宠物名什么的。HTTPS可以加密你的流量，避免别人窥探信息，但是很长一段时间以来，使用这种更先进的协议一直都是可选的。因此就有了HTTP Strict Transport Security，此这种安全措施可确保从一开始往来该网站的流量就是加密的。如果你想要访问网页链接，它会自动将你重定向到网页链接。这就是HSTS的作用。

HSTS还没有普及：估计只有11.1％的网站用到。但2015年春天，重要一刻降临，美国联邦政府和行业合作伙伴对19个政府领域实施HSTS，其中包括Whitehouse.gov，AIDS.gov和donotcall.gov。此后不久，所有联邦机构均要求采用该标准。——Rusty D. Pickens，奥巴马政府白宫前代理新媒体总监

35、Heartbleed漏洞

年代：2012年编写，2014年被发现

计算史上传播最广、危害最大的安全漏洞之一

buffer = OPENSSL_malloc(1 + 2 + payload + padding);bp = buffer;/* Enter response type, length and copy payload */*bp++ = TLS1_HB_RESPONSE;s2n(payload, bp);memcpy(bp, pl, payload);bp += payload;/* Random padding */RAND_pseudo_bytes(bp, padding);来自Naked Security
2014年，安全研究人员在OpenSSL（一个非常受欢迎的开源库）中发现了一个漏洞，大约有三分之二的网站（包括DropBox，Twitter，Yahoo和GitHub）都用到它——用于在两台计算机之间进行在线通信。Heartbleed使得犯罪分子可以通过影响数百万台设备的缓冲区读取漏洞来窃取未加密的机密信息，包括凭据和加密密钥等。这让大家注意到了依靠开源软件来实现关键安全功能所带来的风险，以及识别已被使用多年的代码漏洞的挑战。从更积极的意义上来说，Heartbleed的发现也引发了迅速而有效的全球反应，包括在全球范围内进行的协调宣传和补救工作，其力度和广度均远远超出了以前针对早期漏洞的许多同类行动。-塔夫茨大学助理教授Josephine Wolff

36、波音737 Max

年代：2017年推出

软件错误，加上企业的贪婪，导致数百人丧生，以及大批飞机停飞。

2018年10月，狮航610航班起飞后不久就发生了一次似乎非常怪异的事故，然后坠入海中。波音向公众保证飞机是安全的，并表示需要进行更多的飞行员培训以及“软件升级”。但是仅仅四个月后，埃塞俄比亚航空的一名飞行员抬升机头的努力做了20次，但飞机的自动系统仍然把机头往下推。起飞后的几分钟内，机上所有人员均告死亡。作为对事故的响应，全球的民航当局这这一型号的飞机都停飞了。调查显示，坠机事故是因为737 Max的设计引起的，尤其是鲜为人知，了解程度不高的软件，可能会强制飞机反复做俯冲动作。——技术史学家，《写入程序的不平等》作者Mar Hicks

本文章来源网络，如果原作者不支持咱们转发，请联系删除，谢谢！

